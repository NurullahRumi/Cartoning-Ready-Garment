/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.model.QueryProcedureInput;

import com.mu.cmt.pfs.pfsdb.models.query.*;

@Service
public class PfsdbQueryExecutorServiceImpl implements PfsdbQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryProvPklResponse> executeQryProvPKL(String pordnum, String pshpnum, String ppshpnum, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);
        params.put("pPshpnum", ppshpnum);

        return queryExecutor.executeNamedQuery("qryProvPKL", params, QryProvPklResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryProvPKL(String pordnum, String pshpnum, String ppshpnum, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);
        params.put("pPshpnum", ppshpnum);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryProvPKL", params, QryProvPklResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryPartShpCreateEditProvPklResponse> executeQryPartShpCreateEditProvPKL(String pordnum, String pshpnum, String poperation, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);
        params.put("pOperation", poperation);

        return queryExecutor.executeNamedQuery("qryPartShpCreateEditProvPKL", params, QryPartShpCreateEditProvPklResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryPartShpCreateEditProvPKL(String pordnum, String pshpnum, String poperation, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);
        params.put("pOperation", poperation);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryPartShpCreateEditProvPKL", params, QryPartShpCreateEditProvPklResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryCheckUserAccessResponse executeQryCheckUserAccess(String pordnum, String pshpnum, String ppshpnum) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);
        params.put("pPshpnum", ppshpnum);

        return queryExecutor.executeNamedQuery("qryCheckUserAccess", params, QryCheckUserAccessResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryGetPartShpnumResponse> executeQryGetPartShpnum(String pordnum, String pshpnum, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);

        return queryExecutor.executeNamedQuery("qryGetPartShpnum", params, QryGetPartShpnumResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryGetPartShpnum(String pordnum, String pshpnum, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryGetPartShpnum", params, QryGetPartShpnumResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryGetShpDetailsResponse executeQryGetShpDetails(String pordnum, String pshpnum) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);

        return queryExecutor.executeNamedQuery("qryGetShpDetails", params, QryGetShpDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryPartShpWipResponse> executeQryPartShpWIP(String pordnum, String pshpnum, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);

        return queryExecutor.executeNamedQuery("qryPartShpWIP", params, QryPartShpWipResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryPartShpWIP(String pordnum, String pshpnum, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pOrdnum", pordnum);
        params.put("pShpnum", pshpnum);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryPartShpWIP", params, QryPartShpWipResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public QryCallFmbPathResponse executeQryCallFmbPath(String pfmbprogid, String potherParams) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pFmbprogid", pfmbprogid);
        params.put("pOtherParams", potherParams);

        return queryExecutor.executeNamedQuery("qryCallFmbPath", params, QryCallFmbPathResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager", readOnly = true)
    @Override
    public Page<QryShpnumResponse> executeQryShpnum(String pordnum, Pageable pageable) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        return queryExecutor.executeNamedQuery("qryShpnum", params, QryShpnumResponse.class, pageable);
    }

    @Transactional(value = "pfsdbTransactionManager", timeout = 300, readOnly = true)
    @Override
    public void exportQryShpnum(String pordnum, ExportOptions exportOptions, Pageable pageable, OutputStream outputStream) {
        Map<String, Object> params = new HashMap<>(1);

        params.put("pOrdnum", pordnum);

        QueryProcedureInput queryInput = new QueryProcedureInput("qryShpnum", params, QryShpnumResponse.class);

        queryExecutor.exportNamedQueryData(queryInput, exportOptions, pageable, outputStream);
    }

}