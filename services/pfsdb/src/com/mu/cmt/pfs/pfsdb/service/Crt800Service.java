/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.Crt800;
import com.mu.cmt.pfs.pfsdb.Crt800Id;

/**
 * Service object for domain model class {@link Crt800}.
 */
public interface Crt800Service {

    /**
     * Creates a new Crt800. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Crt800 if any.
     *
     * @param crt800 Details of the Crt800 to be created; value cannot be null.
     * @return The newly created Crt800.
     */
    Crt800 create(@Valid Crt800 crt800);


	/**
     * Returns Crt800 by given id if exists.
     *
     * @param crt800Id The id of the Crt800 to get; value cannot be null.
     * @return Crt800 associated with the given crt800Id.
	 * @throws EntityNotFoundException If no Crt800 is found.
     */
    Crt800 getById(Crt800Id crt800Id);

    /**
     * Find and return the Crt800 by given id if exists, returns null otherwise.
     *
     * @param crt800Id The id of the Crt800 to get; value cannot be null.
     * @return Crt800 associated with the given crt800Id.
     */
    Crt800 findById(Crt800Id crt800Id);

	/**
     * Find and return the list of Crt800s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param crt800Ids The id's of the Crt800 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Crt800s associated with the given crt800Ids.
     */
    List<Crt800> findByMultipleIds(List<Crt800Id> crt800Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing Crt800. It replaces all fields of the existing Crt800 with the given crt800.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Crt800 if any.
     *
     * @param crt800 The details of the Crt800 to be updated; value cannot be null.
     * @return The updated Crt800.
     * @throws EntityNotFoundException if no Crt800 is found with given input.
     */
    Crt800 update(@Valid Crt800 crt800);

    /**
     * Deletes an existing Crt800 with the given id.
     *
     * @param crt800Id The id of the Crt800 to be deleted; value cannot be null.
     * @return The deleted Crt800.
     * @throws EntityNotFoundException if no Crt800 found with the given id.
     */
    Crt800 delete(Crt800Id crt800Id);

    /**
     * Deletes an existing Crt800 with the given object.
     *
     * @param crt800 The instance of the Crt800 to be deleted; value cannot be null.
     */
    void delete(Crt800 crt800);

    /**
     * Find all Crt800s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Crt800s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Crt800> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Crt800s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Crt800s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Crt800> findAll(String query, Pageable pageable);

    /**
     * Exports all Crt800s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Crt800s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Crt800s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Crt800.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}