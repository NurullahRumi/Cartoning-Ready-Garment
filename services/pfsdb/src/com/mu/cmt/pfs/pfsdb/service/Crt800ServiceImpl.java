/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.Crt800;
import com.mu.cmt.pfs.pfsdb.Crt800Id;


/**
 * ServiceImpl object for domain model class Crt800.
 *
 * @see Crt800
 */
@Service("pfsdb.Crt800Service")
@Validated
public class Crt800ServiceImpl implements Crt800Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Crt800ServiceImpl.class);


    @Autowired
    @Qualifier("pfsdb.Crt800Dao")
    private WMGenericDao<Crt800, Crt800Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Crt800, Crt800Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Crt800 create(Crt800 crt800) {
        LOGGER.debug("Creating a new Crt800 with information: {}", crt800);

        Crt800 crt800Created = this.wmGenericDao.create(crt800);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(crt800Created);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Crt800 getById(Crt800Id crt800Id) {
        LOGGER.debug("Finding Crt800 by id: {}", crt800Id);
        return this.wmGenericDao.findById(crt800Id);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Crt800 findById(Crt800Id crt800Id) {
        LOGGER.debug("Finding Crt800 by id: {}", crt800Id);
        try {
            return this.wmGenericDao.findById(crt800Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Crt800 found with id: {}", crt800Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public List<Crt800> findByMultipleIds(List<Crt800Id> crt800Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Crt800s by ids: {}", crt800Ids);

        return this.wmGenericDao.findByMultipleIds(crt800Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "pfsdbTransactionManager")
    @Override
    public Crt800 update(Crt800 crt800) {
        LOGGER.debug("Updating Crt800 with information: {}", crt800);

        this.wmGenericDao.update(crt800);
        this.wmGenericDao.refresh(crt800);

        return crt800;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Crt800 delete(Crt800Id crt800Id) {
        LOGGER.debug("Deleting Crt800 with id: {}", crt800Id);
        Crt800 deleted = this.wmGenericDao.findById(crt800Id);
        if (deleted == null) {
            LOGGER.debug("No Crt800 found with id: {}", crt800Id);
            throw new EntityNotFoundException(String.valueOf(crt800Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public void delete(Crt800 crt800) {
        LOGGER.debug("Deleting Crt800 with {}", crt800);
        this.wmGenericDao.delete(crt800);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Crt800> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Crt800s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Crt800> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Crt800s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service pfsdb for table Crt800 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service pfsdb for table Crt800 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}