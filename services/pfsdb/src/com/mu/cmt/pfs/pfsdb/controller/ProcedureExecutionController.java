/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbProcedureExecutorService;
import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@RestController(value = "Pfsdb.ProcedureExecutionController")
@RequestMapping("/pfsdb/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private PfsdbProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/procCr800pk0_NewPshpBulkInsCtn", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "bulk insert ctntypes in new pshp")
    public ProcCr800pk0NewPshpBulkInsCtnResponse executeProcCr800pk0_NewPshpBulkInsCtn(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pListctntype", required = false) String plistctntype, @RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCr800pk0_NewPshpBulkInsCtn");
        ProcCr800pk0NewPshpBulkInsCtnResponse _result = procedureService.executeProcCr800pk0_NewPshpBulkInsCtn(pordnum, pshpnum, plistctntype, pprgid);
        LOGGER.debug("got the result for named procedure: procCr800pk0_NewPshpBulkInsCtn, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_CR610PklQty", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get CR610 Pkl Qty")
    public ProcCr1100pk0Cr610pklQtyResponse executeProcCR1100PK0_CR610PklQty(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) Integer ppshpnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_CR610PklQty");
        ProcCr1100pk0Cr610pklQtyResponse _result = procedureService.executeProcCR1100PK0_CR610PklQty(pordnum, pshpnum, ppshpnum);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_CR610PklQty, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_CR600PcsCartoned", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get CR600 Pcs Cartoned")
    public ProcCr1100pk0Cr600pcsCartonedResponse executeProcCR1100PK0_CR600PcsCartoned(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, @RequestParam(value = "pTrncode", required = false) String ptrncode, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_CR600PcsCartoned");
        ProcCr1100pk0Cr600pcsCartonedResponse _result = procedureService.executeProcCR1100PK0_CR600PcsCartoned(pordnum, pgmtseq, pclrseqg, ptrncode);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_CR600PcsCartoned, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCr800pk0_BulkInsCtn", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "bulk insert carton types in prov PKL")
    public Void executeProcCr800pk0_BulkInsCtn(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, @RequestParam(value = "pListctntype", required = false) String plistctntype, @RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCr800pk0_BulkInsCtn");
        Void _result = procedureService.executeProcCr800pk0_BulkInsCtn(pordnum, pshpnum, ppshpnum, plistctntype, pprgid);
        LOGGER.debug("got the result for named procedure: procCr800pk0_BulkInsCtn, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR800PK0_FinaliseProvPKL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "finalise provisional packing list")
    public Void executeProcCR800PK0_FinaliseProvPKL(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, @RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR800PK0_FinaliseProvPKL");
        Void _result = procedureService.executeProcCR800PK0_FinaliseProvPKL(pordnum, pshpnum, ppshpnum, pprgid);
        LOGGER.debug("got the result for named procedure: procCR800PK0_FinaliseProvPKL, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_GetCartoningGmtClrDet", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Cartoning Gmt Clr Det")
    public ProcCr1100pk0GetCartoningGmtClrDetResponse executeProcCR1100PK0_GetCartoningGmtClrDet(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pGmtseq", required = false) String pgmtseq, @RequestParam(value = "pClrseqg", required = false) Integer pclrseqg, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_GetCartoningGmtClrDet");
        ProcCr1100pk0GetCartoningGmtClrDetResponse _result = procedureService.executeProcCR1100PK0_GetCartoningGmtClrDet(pprgid, pordnum, pgmtseq, pclrseqg);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_GetCartoningGmtClrDet, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/CR1100pk0FetchMenuItems", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "fetch menu prog url")
    public Cr1100pk0fetchMenuItemsResponse executeCR1100pk0FetchMenuItems(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: CR1100pk0FetchMenuItems");
        Cr1100pk0fetchMenuItemsResponse _result = procedureService.executeCR1100pk0FetchMenuItems(pordnum, pshpnum, ppshpnum);
        LOGGER.debug("got the result for named procedure: CR1100pk0FetchMenuItems, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/CR1100pk0FetchSizes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get order sizes")
    public Cr1100pk0fetchSizesResponse executeCR1100pk0FetchSizes(@RequestParam(value = "pOrdnum") String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: CR1100pk0FetchSizes");
        Cr1100pk0fetchSizesResponse _result = procedureService.executeCR1100pk0FetchSizes(pordnum);
        LOGGER.debug("got the result for named procedure: CR1100pk0FetchSizes, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_CR610PklQtyPerPack", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get CR610 Pkl Qty Per Pack")
    public ProcCr1100pk0Cr610pklQtyPerPackResponse executeProcCR1100PK0_CR610PklQtyPerPack(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) Integer ppshpnum, @RequestParam(value = "pSeqcod", required = false) String pseqcod, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_CR610PklQtyPerPack");
        ProcCr1100pk0Cr610pklQtyPerPackResponse _result = procedureService.executeProcCR1100PK0_CR610PklQtyPerPack(pordnum, pshpnum, ppshpnum, pseqcod);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_CR610PklQtyPerPack, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR800pk0_UnfinaliseProvPKL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "unfinalise provisional packing list")
    public Void executeProcCR800pk0_UnfinaliseProvPKL(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, @RequestParam(value = "pUnfinReason", required = false) String punfinReason, @RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR800pk0_UnfinaliseProvPKL");
        Void _result = procedureService.executeProcCR800pk0_UnfinaliseProvPKL(pordnum, pshpnum, ppshpnum, punfinReason, pprgid);
        LOGGER.debug("got the result for named procedure: procCR800pk0_UnfinaliseProvPKL, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCr800pk0DeleteCtntype", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "delete ctntypes from Provisional PKL")
    public Void executeProcCr800pk0DeleteCtntype(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, @RequestParam(value = "pCtntype", required = false) String pctntype, @RequestParam(value = "pSeqnum", required = false) Integer pseqnum, @RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCr800pk0DeleteCtntype");
        Void _result = procedureService.executeProcCr800pk0DeleteCtntype(pordnum, pshpnum, ppshpnum, pctntype, pseqnum, pprgid);
        LOGGER.debug("got the result for named procedure: procCr800pk0DeleteCtntype, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCr800pk0_provpkl_cartonDef", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get carton definition")
    public ProcCr800pk0ProvpklCartonDefResponse executeProcCr800pk0_provpkl_cartonDef(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, @RequestParam(value = "pFilterOption", required = false) String pfilterOption, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCr800pk0_provpkl_cartonDef");
        ProcCr800pk0ProvpklCartonDefResponse _result = procedureService.executeProcCr800pk0_provpkl_cartonDef(pordnum, pshpnum, ppshpnum, pfilterOption);
        LOGGER.debug("got the result for named procedure: procCr800pk0_provpkl_cartonDef, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_GetCR210OrderDet", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get CR210 Order Det")
    public ProcCr1100pk0GetCr210orderDetResponse executeProcCR1100PK0_GetCR210OrderDet(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_GetCR210OrderDet");
        ProcCr1100pk0GetCr210orderDetResponse _result = procedureService.executeProcCR1100PK0_GetCR210OrderDet(pprgid, pordnum);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_GetCR210OrderDet, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/sy006pk0CallRepURL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "call report URL")
    public Sy006pk0callRepUrlResponse executeSy006pk0CallRepURL(@RequestParam(value = "pReportPath", required = false) String preportPath, @RequestParam(value = "pParams", required = false) String pparams, @RequestParam(value = "pDesformat", required = false) String pdesformat, @RequestParam(value = "pParamForm", required = false) String pparamForm, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: sy006pk0CallRepURL");
        Sy006pk0callRepUrlResponse _result = procedureService.executeSy006pk0CallRepURL(preportPath, pparams, pdesformat, pparamForm);
        LOGGER.debug("got the result for named procedure: sy006pk0CallRepURL, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_GetSht700Det", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Sht 700 Det")
    public ProcCr1100pk0GetSht700detResponse executeProcCR1100PK0_GetSht700Det(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPShpnum", required = false) Integer ppshpnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_GetSht700Det");
        ProcCr1100pk0GetSht700detResponse _result = procedureService.executeProcCR1100PK0_GetSht700Det(pprgid, pordnum, pshpnum, ppshpnum);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_GetSht700Det, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_CR210pShpDet", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get CR210 pShp Det")
    public ProcCr1100pk0Cr210pShpDetResponse executeProcCR1100PK0_CR210pShpDet(@RequestParam(value = "pOrdnum", required = false) String pordnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_CR210pShpDet");
        ProcCr1100pk0Cr210pShpDetResponse _result = procedureService.executeProcCR1100PK0_CR210pShpDet(pordnum);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_CR210pShpDet, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_CR400CrtPexpQty", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get CR400 Crt Pexp Qty")
    public ProcCr1100pk0Cr400crtPexpQtyResponse executeProcCR1100PK0_CR400CrtPexpQty(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_CR400CrtPexpQty");
        ProcCr1100pk0Cr400crtPexpQtyResponse _result = procedureService.executeProcCR1100PK0_CR400CrtPexpQty(pordnum, pshpnum);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_CR400CrtPexpQty, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCr800pk0_qryProvPKL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query provisional PKL")
    public ProcCr800pk0QryProvPklResponse executeProcCr800pk0_qryProvPKL(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, @RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCr800pk0_qryProvPKL");
        ProcCr800pk0QryProvPklResponse _result = procedureService.executeProcCr800pk0_qryProvPKL(pordnum, pshpnum, ppshpnum, pprgid);
        LOGGER.debug("got the result for named procedure: procCr800pk0_qryProvPKL, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCR1100PK0_GetOrt205Det", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Ort205 Det")
    public ProcCr1100pk0GetOrt205detResponse executeProcCR1100PK0_GetOrt205Det(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pUserWMRoleList", required = false) String puserWmroleList, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCR1100PK0_GetOrt205Det");
        ProcCr1100pk0GetOrt205detResponse _result = procedureService.executeProcCR1100PK0_GetOrt205Det(pprgid, pordnum, pshpnum, puserWmroleList);
        LOGGER.debug("got the result for named procedure: procCR1100PK0_GetOrt205Det, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/procCr800pk0_bulkUpdProvPKLQty", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "bulk upd prov pkl qty")
    public Void executeProcCr800pk0_bulkUpdProvPKLQty(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, @RequestParam(value = "pRows", required = false) String prows, @RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: procCr800pk0_bulkUpdProvPKLQty");
        Void _result = procedureService.executeProcCr800pk0_bulkUpdProvPKLQty(pordnum, pshpnum, ppshpnum, prows, pprgid);
        LOGGER.debug("got the result for named procedure: procCr800pk0_bulkUpdProvPKLQty, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/sy006pk0_runrepCallUrl", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "call report URL")
    public Sy006pk0RunrepCallUrlResponse executeSy006pk0_runrepCallUrl(@RequestParam(value = "pReportPath", required = false) String preportPath, @RequestParam(value = "pParams", required = false) String pparams, @RequestParam(value = "pDesformat", required = false) String pdesformat, @RequestParam(value = "pParamForm", required = false) String pparamForm, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: sy006pk0_runrepCallUrl");
        Sy006pk0RunrepCallUrlResponse _result = procedureService.executeSy006pk0_runrepCallUrl(preportPath, pparams, pdesformat, pparamForm);
        LOGGER.debug("got the result for named procedure: sy006pk0_runrepCallUrl, result:{}", _result);
        return _result;
    }

}