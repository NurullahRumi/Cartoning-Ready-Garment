/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbQueryExecutorService;
import com.mu.cmt.pfs.pfsdb.models.query.*;

@RestController(value = "Pfsdb.QueryExecutionController")
@RequestMapping("/pfsdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private PfsdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/qryProvPKL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query provisional packing list")
    public Page<QryProvPklResponse> executeQryProvPKL(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryProvPKL");
        Page<QryProvPklResponse> _result = queryService.executeQryProvPKL(pordnum, pshpnum, ppshpnum, pageable);
        LOGGER.debug("got the result for named query: qryProvPKL, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryProvPKL")
    @RequestMapping(value = "/queries/qryProvPKL/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryProvPKL(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryProvPKL");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryProvPKL";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryProvPKL(pordnum, pshpnum, ppshpnum,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryPartShpCreateEditProvPKL", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qry pshpnum for which prov pkl not yet defined")
    public Page<QryPartShpCreateEditProvPklResponse> executeQryPartShpCreateEditProvPKL(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pOperation", required = false) String poperation, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryPartShpCreateEditProvPKL");
        Page<QryPartShpCreateEditProvPklResponse> _result = queryService.executeQryPartShpCreateEditProvPKL(pordnum, pshpnum, poperation, pageable);
        LOGGER.debug("got the result for named query: qryPartShpCreateEditProvPKL, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryPartShpCreateEditProvPKL")
    @RequestMapping(value = "/queries/qryPartShpCreateEditProvPKL/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryPartShpCreateEditProvPKL(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pOperation", required = false) String poperation, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryPartShpCreateEditProvPKL");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryPartShpCreateEditProvPKL";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryPartShpCreateEditProvPKL(pordnum, pshpnum, poperation,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryCheckUserAccess", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "check if user has access")
    public QryCheckUserAccessResponse executeQryCheckUserAccess(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestParam(value = "pPshpnum", required = false) String ppshpnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryCheckUserAccess");
        QryCheckUserAccessResponse _result = queryService.executeQryCheckUserAccess(pordnum, pshpnum, ppshpnum);
        LOGGER.debug("got the result for named query: qryCheckUserAccess, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qryGetPartShpnum", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query get part shipments")
    public Page<QryGetPartShpnumResponse> executeQryGetPartShpnum(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetPartShpnum");
        Page<QryGetPartShpnumResponse> _result = queryService.executeQryGetPartShpnum(pordnum, pshpnum, pageable);
        LOGGER.debug("got the result for named query: qryGetPartShpnum, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetPartShpnum")
    @RequestMapping(value = "/queries/qryGetPartShpnum/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetPartShpnum(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetPartShpnum");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetPartShpnum";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetPartShpnum(pordnum, pshpnum,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetShpDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get shipment details")
    public QryGetShpDetailsResponse executeQryGetShpDetails(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetShpDetails");
        QryGetShpDetailsResponse _result = queryService.executeQryGetShpDetails(pordnum, pshpnum);
        LOGGER.debug("got the result for named query: qryGetShpDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qryPartShpWIP", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query part shp for which provisional PKL WIP")
    public Page<QryPartShpWipResponse> executeQryPartShpWIP(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryPartShpWIP");
        Page<QryPartShpWipResponse> _result = queryService.executeQryPartShpWIP(pordnum, pshpnum, pageable);
        LOGGER.debug("got the result for named query: qryPartShpWIP, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryPartShpWIP")
    @RequestMapping(value = "/queries/qryPartShpWIP/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryPartShpWIP(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pShpnum", required = false) String pshpnum, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryPartShpWIP");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryPartShpWIP";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryPartShpWIP(pordnum, pshpnum,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryCallFmbPath", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "call Fmb prog path")
    public QryCallFmbPathResponse executeQryCallFmbPath(@RequestParam(value = "pFmbprogid", required = false) String pfmbprogid, @RequestParam(value = "pOtherParams", required = false) String potherParams, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryCallFmbPath");
        QryCallFmbPathResponse _result = queryService.executeQryCallFmbPath(pfmbprogid, potherParams);
        LOGGER.debug("got the result for named query: qryCallFmbPath, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/qryShpnum", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "query shipments")
    public Page<QryShpnumResponse> executeQryShpnum(@RequestParam(value = "pOrdnum", required = false) String pordnum, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryShpnum");
        Page<QryShpnumResponse> _result = queryService.executeQryShpnum(pordnum, pageable);
        LOGGER.debug("got the result for named query: qryShpnum, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryShpnum")
    @RequestMapping(value = "/queries/qryShpnum/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryShpnum(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryShpnum");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryShpnum";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryShpnum(pordnum,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}